import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/network/dio_client.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction/transaction.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction_request/transaction_request.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction_response/transaction_response.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// Remote data source –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@injectable
class RemoteTransactionRepository {
  final DioClient _dioClient;
  final Talker _talker;

  RemoteTransactionRepository(this._dioClient, this._talker);

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
  /// –í–ê–ñ–ù–û: API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint
  /// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getTransactionsByAccountAndPeriod() –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ
  @Deprecated('API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç getAllTransactions. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getTransactionsByAccountAndPeriod()')
  Future<List<TransactionResponse>> getAllTransactions() async {
    _talker.warning('‚ö†Ô∏è RemoteTransactionRepository: getAllTransactions DEPRECATED - API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint');
    _talker.info('üí° RemoteTransactionRepository: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getTransactionsByAccountAndPeriod() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    // API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    return [];
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
  Future<TransactionResponse> getTransaction(int id) async {
    _talker.info('üåê RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id');
    try {
      final response = await _dioClient.get('/transactions/$id');
      _talker.debug('üì• RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id');
      
      final transaction = TransactionResponse.fromJson(response.data);
      _talker.info('‚úÖ RemoteTransactionRepository: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${transaction.id}');
      return transaction;
    } catch (e, st) {
      _talker.error('‚ùå RemoteTransactionRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<Transaction> createTransaction(TransactionRequest request) async {
    _talker.info('üåê RemoteTransactionRepository: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${request.amount}');
    
    // –°–æ–∑–¥–∞–µ–º JSON –≤—Ä—É—á–Ω—É—é, –∏—Å–∫–ª—é—á–∞—è null –∑–Ω–∞—á–µ–Ω–∏—è
    final requestData = <String, dynamic>{
      'accountId': request.accountId,
      'categoryId': request.categoryId,
      'amount': request.amount,
      'transactionDate': '${request.transactionDate.year}-${request.transactionDate.month.toString().padLeft(2, '0')}-${request.transactionDate.day.toString().padLeft(2, '0')}',
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º comment —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ null –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (request.comment != null && request.comment!.isNotEmpty) {
      requestData['comment'] = request.comment;
    }
    
    _talker.debug('üì§ RemoteTransactionRepository: Request data: $requestData');
    
    try {
      final response = await _dioClient.post(
        '/transactions',
        data: requestData,
      );
      _talker.debug('üì• RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      
      final transaction = Transaction.fromJson(response.data);
      _talker.info('‚úÖ RemoteTransactionRepository: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${transaction.id}');
      return transaction;
    } catch (e, st) {
      _talker.error('‚ùå RemoteTransactionRepository: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${request.amount}', e, st);
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<TransactionResponse> updateTransaction(int id, TransactionRequest request) async {
    _talker.info('üåê RemoteTransactionRepository: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id');
    
    // –°–æ–∑–¥–∞–µ–º JSON –≤—Ä—É—á–Ω—É—é, –∏—Å–∫–ª—é—á–∞—è null –∑–Ω–∞—á–µ–Ω–∏—è
    final requestData = <String, dynamic>{
      'accountId': request.accountId,
      'categoryId': request.categoryId,
      'amount': request.amount,
      'transactionDate': '${request.transactionDate.year}-${request.transactionDate.month.toString().padLeft(2, '0')}-${request.transactionDate.day.toString().padLeft(2, '0')}',
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º comment —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ null –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if (request.comment != null && request.comment!.isNotEmpty) {
      requestData['comment'] = request.comment;
    }
    
    _talker.debug('üì§ RemoteTransactionRepository: Update data: $requestData');
    
    try {
      final response = await _dioClient.put(
        '/transactions/$id',
        data: requestData,
      );
      _talker.debug('üì• RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id');
      
      final transaction = TransactionResponse.fromJson(response.data);
      _talker.info('‚úÖ RemoteTransactionRepository: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${transaction.id}');
      return transaction;
    } catch (e, st) {
      _talker.error('‚ùå RemoteTransactionRepository: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<void> deleteTransaction(int id) async {
    _talker.info('üåê RemoteTransactionRepository: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id');
    try {
      await _dioClient.delete('/transactions/$id');
      _talker.info('‚úÖ RemoteTransactionRepository: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: $id');
    } catch (e, st) {
      _talker.error('‚ùå RemoteTransactionRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥
  Future<List<TransactionResponse>> getTransactionsByAccountAndPeriod({
    required int accountId,
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    _talker.info('üåê RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ $accountId –∑–∞ –ø–µ—Ä–∏–æ–¥');
    try {
      final queryParams = <String, dynamic>{};
      if (startDate != null) {
        // API –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        queryParams['startDate'] = '${startDate.year}-${startDate.month.toString().padLeft(2, '0')}-${startDate.day.toString().padLeft(2, '0')}';
      }
      if (endDate != null) {
        // API –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        queryParams['endDate'] = '${endDate.year}-${endDate.month.toString().padLeft(2, '0')}-${endDate.day.toString().padLeft(2, '0')}';
      }
      
      final response = await _dioClient.get(
        '/transactions/account/$accountId/period',
        queryParameters: queryParams,
      );
      _talker.debug('üì• RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥');
      
      final transactions = (response.data as List)
          .map((json) => TransactionResponse.fromJson(json))
          .toList();
      
      _talker.info('‚úÖ RemoteTransactionRepository: –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥');
      return transactions;
    } catch (e, st) {
      _talker.error('‚ùå RemoteTransactionRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥', e, st);
      rethrow;
    }
  }
}
