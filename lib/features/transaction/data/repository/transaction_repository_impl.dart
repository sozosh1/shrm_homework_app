import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/services/backup_sync_service.dart';
import 'package:shrm_homework_app/core/services/connectivity_service.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction/transaction.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction_request/transaction_request.dart';
import 'package:shrm_homework_app/features/transaction/data/models/transaction_response/transaction_response.dart';
import 'package:shrm_homework_app/features/transaction/data/repository/local_transaction_repository.dart';
import 'package:shrm_homework_app/features/transaction/data/repository/remote_transaction_repository.dart';
import 'package:shrm_homework_app/features/transaction/domain/repository/transaction_repository.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TransactionRepository —Å offline-first –ø–æ–¥—Ö–æ–¥–æ–º
@Injectable(as: TransactionRepository)
class TransactionRepositoryImpl implements TransactionRepository {
  final LocalTransactionRepository _localRepository;
  final RemoteTransactionRepository _remoteRepository;
  final ConnectivityService _connectivityService;
  final BackupSyncService _backupSyncService;
  final Talker _talker;

  TransactionRepositoryImpl(
    this._localRepository,
    this._remoteRepository,
    this._connectivityService,
    this._backupSyncService,
    this._talker,
  );

  @override
  Future<List<TransactionResponse>> getAllTransactions() async {
    _talker.info('üéØ TransactionRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (offline-first)');
    
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await _trySync();
      
      // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
      if (await _connectivityService.isConnected) {
        _talker.info('üåê TransactionRepositoryImpl: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint');
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥
          // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID=1 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
          final now = DateTime.now();
          final startDate = DateTime(now.year, now.month - 6, now.day);
          
          _talker.debug('üîç TransactionRepositoryImpl: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å $startDate –ø–æ $now –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ 1');
          
          final remoteTransactions = await _remoteRepository.getTransactionsByAccountAndPeriod(
            accountId: 1,
            startDate: startDate,
            endDate: now,
          );
          _talker.info('‚úÖ TransactionRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–æ ${remoteTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint');
          
          // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ
          if (remoteTransactions.isNotEmpty) {
            await _updateLocalFromRemote(remoteTransactions);
            return remoteTransactions;
          } else {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            _talker.info('üì± TransactionRepositoryImpl: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return await _localRepository.getAllTransactions();
          }
        } catch (e) {
          _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', e);
          return await _localRepository.getAllTransactions();
        }
      } else {
        _talker.info('üì± TransactionRepositoryImpl: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return await _localRepository.getAllTransactions();
      }
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', e, st);
      rethrow;
    }
  }

  @override
  Future<TransactionResponse> getTransaction(int id) async {
    _talker.info('üéØ TransactionRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id (offline-first)');
    
    try {
      await _trySync();
      
      if (await _connectivityService.isConnected) {
        try {
          final remoteTransaction = await _remoteRepository.getTransaction(id);
          _talker.info('‚úÖ TransactionRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è $id —Å —Å–µ—Ä–≤–µ—Ä–∞');
          return remoteTransaction;
        } catch (e) {
          _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ', e);
          return await _localRepository.getTransaction(id);
        }
      } else {
        return await _localRepository.getTransaction(id);
      }
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  @override
  Future<Transaction> createTransaction(TransactionRequest request) async {
    _talker.info('üéØ TransactionRepositoryImpl: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${request.amount} (offline-first)');
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (offline-first)
      _talker.info('üíæ TransactionRepositoryImpl: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ');
      final localTransaction = await _localRepository.createTransaction(request);
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupSyncService.addBackupOperation(
        operationType: 'create',
        entityType: 'transaction',
        entityId: localTransaction.id,
        entityData: request.toJson(),
      );
      _talker.info('üìù TransactionRepositoryImpl: –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      
      // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      await _trySync();
      
      return localTransaction;
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', e, st);
      rethrow;
    }
  }

  @override
  Future<TransactionResponse> updateTransaction(int id, TransactionRequest request) async {
    _talker.info('üéØ TransactionRepositoryImpl: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id (offline-first)');
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      _talker.info('üíæ TransactionRepositoryImpl: –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ');
      final localTransaction = await _localRepository.updateTransaction(id, request);
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupSyncService.addBackupOperation(
        operationType: 'update',
        entityType: 'transaction',
        entityId: id,
        entityData: request.toJson(),
      );
      _talker.info('üìù TransactionRepositoryImpl: –û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      
      // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      await _trySync();
      
      return localTransaction;
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  @override
  Future<void> deleteTransaction(int id) async {
    _talker.info('üéØ TransactionRepositoryImpl: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $id (offline-first)');
    
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞ (–º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)
      TransactionResponse? transaction;
      try {
        transaction = await _localRepository.getTransaction(id);
      } catch (e) {
        _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è $id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: $e');
      }
      
      // 2. –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      _talker.info('üíæ TransactionRepositoryImpl: –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ');
      await _localRepository.deleteTransaction(id);
      
      // 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
      if (transaction != null) {
        await _backupSyncService.addBackupOperation(
          operationType: 'delete',
          entityType: 'transaction',
          entityId: id,
          entityData: TransactionRequest(
            accountId: transaction.account.id,
            categoryId: transaction.category.id,
            amount: transaction.amount,
            comment: transaction.comment,
            transactionDate: transaction.transactionDate,
          ).toJson(),
        );
        _talker.info('üìù TransactionRepositoryImpl: –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      } else {
        _talker.info('üìù TransactionRepositoryImpl: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
      
      // 4. –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      await _trySync();
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –ü—ã—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> _trySync() async {
    try {
      if (await _connectivityService.isConnected) {
        _talker.info('üîÑ TransactionRepositoryImpl: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        
        final pendingCount = await _backupSyncService.getPendingOperationsCount();
        if (pendingCount > 0) {
          _talker.info('üìã TransactionRepositoryImpl: –ù–∞–π–¥–µ–Ω–æ $pendingCount –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
          
          final success = await _backupSyncService.syncAllOperations();
          if (success) {
            _talker.info('‚úÖ TransactionRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } else {
            _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        }
      }
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _updateLocalFromRemote(List<TransactionResponse> remoteTransactions) async {
    try {
      _talker.info('üîÑ TransactionRepositoryImpl: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      
      _talker.info('‚úÖ TransactionRepositoryImpl: –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', e, st);
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSync() async {
    _talker.info('üîÑ TransactionRepositoryImpl: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    try {
      return await _backupSyncService.syncAllOperations();
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<int> getPendingOperationsCount() async {
    try {
      return await _backupSyncService.getPendingOperationsCount();
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π', e, st);
      return 0;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> clearAllPendingOperations() async {
    _talker.info('üßπ TransactionRepositoryImpl: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    try {
      await _backupSyncService.clearAllPendingOperations();
      _talker.info('‚úÖ TransactionRepositoryImpl: –í—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π', e, st);
      rethrow;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> clearFailedOperations() async {
    _talker.info('üßπ TransactionRepositoryImpl: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    try {
      await _backupSyncService.clearFailedOperations();
      _talker.info('‚úÖ TransactionRepositoryImpl: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (e, st) {
      _talker.error('‚ùå TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
  Future<List<Map<String, dynamic>>> getPendingOperationsInfo() async {
    try {
      final operations = await _backupSyncService.getPendingOperations();
      return operations.map((op) => {
        'id': op.id,
        'type': op.operationType,
        'entity': op.entityType,
        'entityId': op.entityId,
        'createdAt': op.createdAt.toIso8601String(),
        'retryCount': op.retryCount,
        'syncError': op.syncError,
      }).toList();
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è TransactionRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö', e, st);
      return [];
    }
  }
}
