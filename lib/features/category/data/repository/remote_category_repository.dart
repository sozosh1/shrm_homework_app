import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/network/dio_client.dart';
import 'package:shrm_homework_app/features/category/domain/models/category/category.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (API)
@injectable
class RemoteCategoryRepository {
  final DioClient _dio;
  final Talker _talker;

  RemoteCategoryRepository(this._dio, this._talker);

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<List<Category>> getAllCategories() async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    
    try {
      final response = await _dio.get('/categories');
      _talker.info('‚úÖ RemoteCategoryRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      _talker.debug('üìÑ RemoteCategoryRepository: Response data: ${response.data}');
      
      final List<dynamic> categoriesJson = response.data as List<dynamic>;
      final categories = categoriesJson
          .map((json) => Category.fromJson(json as Map<String, dynamic>))
          .toList();
      
      _talker.info('‚úÖ RemoteCategoryRepository: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return categories;
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  Future<Category> getCategory(int id) async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: $id');
    
    try {
      final response = await _dio.get('/categories/$id');
      _talker.info('‚úÖ RemoteCategoryRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id');
      _talker.debug('üìÑ RemoteCategoryRepository: Response data: ${response.data}');
      
      final category = Category.fromJson(response.data as Map<String, dynamic>);
      _talker.info('‚úÖ RemoteCategoryRepository: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}"');
      return category;
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<Category> createCategory(Category category) async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}"');
    _talker.debug('üìÑ RemoteCategoryRepository: Request data: ${category.toJson()}');
    
    try {
      final response = await _dio.post(
        '/categories',
        data: category.toJson(),
      );
      _talker.info('‚úÖ RemoteCategoryRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      _talker.debug('üìÑ RemoteCategoryRepository: Response data: ${response.data}');
      
      final createdCategory = Category.fromJson(response.data as Map<String, dynamic>);
      _talker.info('‚úÖ RemoteCategoryRepository: –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${createdCategory.name}" —Å ID: ${createdCategory.id}');
      return createdCategory;
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}"', e, st);
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<Category> updateCategory(int id, Category category) async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: $id');
    _talker.debug('üìÑ RemoteCategoryRepository: Request data: ${category.toJson()}');
    
    try {
      final response = await _dio.put(
        '/categories/$id',
        data: category.toJson(),
      );
      _talker.info('‚úÖ RemoteCategoryRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id');
      _talker.debug('üìÑ RemoteCategoryRepository: Response data: ${response.data}');
      
      final updatedCategory = Category.fromJson(response.data as Map<String, dynamic>);
      _talker.info('‚úÖ RemoteCategoryRepository: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${updatedCategory.name}" —Å ID: ${updatedCategory.id}');
      return updatedCategory;
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<void> deleteCategory(int id) async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: $id');
    
    try {
      await _dio.delete('/categories/$id');
      _talker.info('‚úÖ RemoteCategoryRepository: –ö–∞—Ç–µ–≥–æ—Ä–∏—è $id —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É (–¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã)
  Future<List<Category>> getCategoriesByType(bool isIncome) async {
    _talker.info('üåê RemoteCategoryRepository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞: ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"}');
    
    try {
      final response = await _dio.get('/categories', queryParameters: {
        'isIncome': isIncome,
      });
      _talker.info('‚úÖ RemoteCategoryRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"}');
      _talker.debug('üìÑ RemoteCategoryRepository: Response data: ${response.data}');
      
      final List<dynamic> categoriesJson = response.data as List<dynamic>;
      final categories = categoriesJson
          .map((json) => Category.fromJson(json as Map<String, dynamic>))
          .toList();
      
      _talker.info('‚úÖ RemoteCategoryRepository: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"}');
      return categories;
    } catch (e, st) {
      _talker.error('‚ùå RemoteCategoryRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"}', e, st);
      rethrow;
    }
  }
}
