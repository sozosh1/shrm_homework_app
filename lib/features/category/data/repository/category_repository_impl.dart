import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/services/backup_sync_service.dart';
import 'package:shrm_homework_app/core/services/connectivity_service.dart';
import 'package:shrm_homework_app/features/category/data/repository/local_category_repository.dart';
import 'package:shrm_homework_app/features/category/data/repository/remote_category_repository.dart';
import 'package:shrm_homework_app/features/category/domain/models/category/category.dart';
import 'package:shrm_homework_app/features/category/domain/repository/category_repository.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CategoryRepository —Å offline-first –ø–æ–¥—Ö–æ–¥–æ–º
@Injectable(as: CategoryRepository)
class CategoryRepositoryImpl implements CategoryRepository {
  final LocalCategoryRepository _localRepository;
  final RemoteCategoryRepository _remoteRepository;
  final ConnectivityService _connectivityService;
  final BackupSyncService _backupSyncService;
  final Talker _talker;

  CategoryRepositoryImpl(
    this._localRepository,
    this._remoteRepository,
    this._connectivityService,
    this._backupSyncService,
    this._talker,
  );

  @override
  Future<List<Category>> getAllCategories() async {
    _talker.info('üéØ CategoryRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (offline-first)');
    
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await _trySync();
      
      // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (await _connectivityService.isConnected) {
        _talker.info('üåê CategoryRepositoryImpl: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        try {
          final remoteCategories = await _remoteRepository.getAllCategories();
          _talker.info('‚úÖ CategoryRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–æ ${remoteCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
          await _updateLocalFromRemote(remoteCategories);
          
          return remoteCategories;
        } catch (e) {
          _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', e);
          return await _localRepository.getAllCategories();
        }
      } else {
        _talker.info('üì± CategoryRepositoryImpl: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return await _localRepository.getAllCategories();
      }
    } catch (e, st) {
      _talker.error('‚ùå CategoryRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π', e, st);
      rethrow;
    }
  }

  @override
  Future<List<Category>> getCategoriesByType(bool isIncome) async {
    _talker.info('üéØ CategoryRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"} (offline-first)');
    
    try {
      await _trySync();
      
      if (await _connectivityService.isConnected) {
        _talker.info('üåê CategoryRepositoryImpl: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        try {
          final remoteCategories = await _remoteRepository.getCategoriesByType(isIncome);
          _talker.info('‚úÖ CategoryRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–æ ${remoteCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ ${isIncome ? "–¥–æ—Ö–æ–¥—ã" : "—Ä–∞—Å—Ö–æ–¥—ã"} —Å —Å–µ—Ä–≤–µ—Ä–∞');
          return remoteCategories;
        } catch (e) {
          _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ', e);
          return await _localRepository.getCategoriesByType(isIncome);
        }
      } else {
        return await _localRepository.getCategoriesByType(isIncome);
      }
    } catch (e, st) {
      _talker.error('‚ùå CategoryRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É', e, st);
      rethrow;
    }
  }

  /// –ü—ã—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> _trySync() async {
    try {
      if (await _connectivityService.isConnected) {
        _talker.info('üîÑ CategoryRepositoryImpl: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        
        final pendingCount = await _backupSyncService.getPendingOperationsCount();
        if (pendingCount > 0) {
          _talker.info('üìã CategoryRepositoryImpl: –ù–∞–π–¥–µ–Ω–æ $pendingCount –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
          
          final success = await _backupSyncService.syncAllOperations();
          if (success) {
            _talker.info('‚úÖ CategoryRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } else {
            _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        }
      }
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _updateLocalFromRemote(List<Category> remoteCategories) async {
    try {
      _talker.info('üîÑ CategoryRepositoryImpl: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö');
      
      if (remoteCategories.isNotEmpty) {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await _localRepository.clearAllCategories();
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        for (final category in remoteCategories) {
          await _localRepository.createCategory(category.name, category.emoji, category.isIncome);
        }
        
        _talker.info('‚úÖ CategoryRepositoryImpl: –û–±–Ω–æ–≤–ª–µ–Ω–æ ${remoteCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }
      
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', e, st);
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSync() async {
    _talker.info('üîÑ CategoryRepositoryImpl: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    try {
      return await _backupSyncService.syncAllOperations();
    } catch (e, st) {
      _talker.error('‚ùå CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<int> getPendingOperationsCount() async {
    try {
      return await _backupSyncService.getPendingOperationsCount();
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è CategoryRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π', e, st);
      return 0;
    }
  }
}
