import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/network/dio_client.dart';
import 'package:shrm_homework_app/features/account/data/models/account_create_request/account_create_request.dart';
import 'package:shrm_homework_app/features/account/data/models/account_history_response/account_history_response.dart';
import 'package:shrm_homework_app/features/account/data/models/account_responce/account_response.dart';
import 'package:shrm_homework_app/features/account/data/models/account_update_request/account_update_request.dart';
import 'package:shrm_homework_app/features/account/domain/models/account/account.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// Remote data source –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@injectable
class RemoteAccountRepository {
  final DioClient _dioClient;
  final Talker _talker;

  RemoteAccountRepository(this._dioClient, this._talker);

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<Account>> getAllAccounts() async {
    _talker.info('üåê RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    try {
      final response = await _dioClient.get('/accounts');
      _talker.debug('üì• RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      
      final accounts = (response.data as List)
          .map((json) => Account.fromJson(json))
          .toList();
      
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      return accounts;
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  Future<AccountResponse> getAccount(int id) async {
    _talker.info('üåê RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id');
    try {
      final response = await _dioClient.get('/accounts/$id');
      _talker.debug('üì• RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id');
      
      final account = AccountResponse.fromJson(response.data);
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ${account.name}');
      return account;
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
  Future<Account> createAccount(AccountCreateRequest request) async {
    _talker.info('üåê RemoteAccountRepository: –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ${request.name}');
    try {
      final response = await _dioClient.post(
        '/accounts',
        data: request.toJson(),
      );
      _talker.debug('üì• RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞');
      
      final account = Account.fromJson(response.data);
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç ID: ${account.id}');
      return account;
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${request.name}', e, st);
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
  Future<Account> updateAccount(int id, AccountUpdateRequest request) async {
    _talker.info('üåê RemoteAccountRepository: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id');
    try {
      final response = await _dioClient.put(
        '/accounts/$id',
        data: request.toJson(),
      );
      _talker.debug('üì• RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ $id');
      
      final account = Account.fromJson(response.data);
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ${account.name}');
      return account;
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
  Future<void> deleteAccount(int id) async {
    _talker.info('üåê RemoteAccountRepository: –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id');
    try {
      await _dioClient.delete('/accounts/$id');
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ID: $id');
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<AccountHistoryResponse> getAccountHistory(int id) async {
    _talker.info('üåê RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id');
    try {
      final response = await _dioClient.get('/accounts/$id/history');
      _talker.debug('üì• RemoteAccountRepository: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ $id');
      
      final history = AccountHistoryResponse.fromJson(response.data);
      _talker.info('‚úÖ RemoteAccountRepository: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å ${history.history.length} –∑–∞–ø–∏—Å—è–º–∏');
      return history;
    } catch (e, st) {
      _talker.error('‚ùå RemoteAccountRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }
}
