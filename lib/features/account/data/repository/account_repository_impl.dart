import 'dart:async';
import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/services/backup_sync_service.dart';
import 'package:shrm_homework_app/core/services/connectivity_service.dart';
import 'package:shrm_homework_app/features/account/data/models/account_responce/account_response.dart';
import 'package:shrm_homework_app/features/account/data/models/account_update_request/account_update_request.dart';
import 'package:shrm_homework_app/features/account/data/repository/local_account_repository.dart';
import 'package:shrm_homework_app/features/account/data/repository/remote_account_repository.dart';
import 'package:shrm_homework_app/features/account/domain/models/account/account.dart';
import 'package:shrm_homework_app/features/account/domain/repository/account_repository.dart';
import 'package:talker_flutter/talker_flutter.dart';

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è AccountRepository —Å offline-first –ø–æ–¥—Ö–æ–¥–æ–º
/// –°–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
@Injectable(as: AccountRepository)
class AccountRepositoryImpl implements AccountRepository {
  final LocalAccountRepository _localRepository;
  final RemoteAccountRepository _remoteRepository;
  final ConnectivityService _connectivityService;
  final BackupSyncService _backupSyncService;
  final Talker _talker;

  AccountRepositoryImpl(
    this._localRepository,
    this._remoteRepository,
    this._connectivityService,
    this._backupSyncService,
    this._talker,
  );

  @override
  Future<AccountResponse> getAccount(int id) async {
    _talker.info('üéØ AccountRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id (offline-first)');
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await _trySync();
      
      // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (await _connectivityService.isConnected) {
        _talker.info('üåê AccountRepositoryImpl: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        try {
          final remoteAccount = await _remoteRepository.getAccount(id);
          _talker.info('‚úÖ AccountRepositoryImpl: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
          await _updateLocalFromRemote(remoteAccount);
          
          return remoteAccount;
        } catch (e) {
          _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', e);
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          return await _localRepository.getAccount(id);
        }
      } else {
        _talker.info('üì± AccountRepositoryImpl: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return await _localRepository.getAccount(id);
      }
    } catch (e, st) {
      _talker.error('‚ùå AccountRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }

  @override
  Future<Account> updateAccount(int id, AccountUpdateRequest request) async {
    _talker.info('üéØ AccountRepositoryImpl: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: $id (offline-first)');
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (offline-first)
      _talker.info('üíæ AccountRepositoryImpl: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ');
      final localAccount = await _localRepository.updateAccount(id, request);
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupSyncService.addBackupOperation(
        operationType: 'update',
        entityType: 'account',
        entityId: id,
        entityData: {
          'name': request.name,
          'balance': request.balance,
          'currency': request.currency,
        },
      );
      _talker.info('üìù AccountRepositoryImpl: –û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      
      // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      await _trySync();
      
      return localAccount;
    } catch (e, st) {
      _talker.error('‚ùå AccountRepositoryImpl: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ $id', e, st);
      rethrow;
    }
  }

  @override
  Stream<List<Map<String, dynamic>>> getTransactionHistoryStream() {
    _talker.info('üéØ AccountRepositoryImpl: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    return _localRepository.getTransactionHistoryStream();
  }

  /// –ü—ã—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> _trySync() async {
    try {
      if (await _connectivityService.isConnected) {
        _talker.info('üîÑ AccountRepositoryImpl: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        
        final pendingCount = await _backupSyncService.getPendingOperationsCount();
        if (pendingCount > 0) {
          _talker.info('üìã AccountRepositoryImpl: –ù–∞–π–¥–µ–Ω–æ $pendingCount –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
          
          final success = await _backupSyncService.syncAllOperations();
          if (success) {
            _talker.info('‚úÖ AccountRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } else {
            _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        } else {
          _talker.debug('üìã AccountRepositoryImpl: –ù–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
        }
      } else {
        _talker.debug('üì± AccountRepositoryImpl: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      }
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _updateLocalFromRemote(AccountResponse remoteAccount) async {
    try {
      _talker.info('üîÑ AccountRepositoryImpl: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
      final updateRequest = AccountUpdateRequest(
        name: remoteAccount.name,
        balance: remoteAccount.balance,
        currency: remoteAccount.currency,
      );
      
      await _localRepository.updateAccount(remoteAccount.id, updateRequest);
      _talker.info('‚úÖ AccountRepositoryImpl: –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', e, st);
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<bool> isSynced() async {
    try {
      return await _backupSyncService.isFullySynced;
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSync() async {
    _talker.info('üîÑ AccountRepositoryImpl: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    try {
      return await _backupSyncService.syncAllOperations();
    } catch (e, st) {
      _talker.error('‚ùå AccountRepositoryImpl: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', e, st);
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<int> getPendingOperationsCount() async {
    try {
      return await _backupSyncService.getPendingOperationsCount();
    } catch (e, st) {
      _talker.warning('‚ö†Ô∏è AccountRepositoryImpl: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π', e, st);
      return 0;
    }
  }
}
