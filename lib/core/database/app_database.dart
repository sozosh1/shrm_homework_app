import 'dart:io';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:injectable/injectable.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';
import 'package:sqlite3/sqlite3.dart';
import 'package:talker_flutter/talker_flutter.dart';

import 'tables/accounts_table.dart';
import 'tables/categories_table.dart';
import 'tables/transactions_table.dart';
import 'tables/backup_operations_table.dart';

part 'app_database.g.dart';

@DriftDatabase(
  tables: [
    AccountsTable,
    CategoriesTable,
    TransactionsTable,
    BackUpOperationsTable,
  ],
)
@singleton
class AppDatabase extends _$AppDatabase with ChangeNotifier {
  final Talker _talker;

  AppDatabase(this._talker) : super(_openConnection(_talker));

  @override
  int get schemaVersion => 1;

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (Migrator m) async {
        await m.createAll();
        _talker.log('üéØ Database tables created');

        await _insertInitialCategories();
        _talker.log('üìÇ Initial categories inserted');

        await _insertInitialAccount();
        _talker.log('üí≥ Initial account inserted');

        await _insertSampleTransactions();
        _talker.log('üí∞ Sample transactions inserted');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        final transactions = await select(transactionsTable).get();
        _talker.info(
          '‚úÖ Verified ${transactions.length} transactions after migration',
        );
      },
      onUpgrade: (Migrator m, int from, int to) async {
        _talker.log('üîÑ Database upgraded from $from to $to');
      },
    );
  }

  Future<TransactionsTableData> createTransaction({
    required int accountId,
    required int categoryId,
    required double amount,
    required String comment,
    DateTime? transactionDate,
  }) async {
    _talker.info('üí∞ Creating transaction: $amount for account $accountId');
    try {
      final transaction = await into(transactionsTable).insertReturning(
        TransactionsTableCompanion.insert(
          accountId: accountId,
          categoryId: categoryId,
          amount: amount,
          comment: Value(comment),
          transactionDate: transactionDate ?? DateTime.now(),
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        ),
      );
      _talker.info('‚úÖ Transaction created successfully: ID ${transaction.id}');
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ç–æ–∫ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      notifyListeners();
      return transaction;
    } catch (e, stackTrace) {
      _talker.error('‚ùå Failed to create transaction', e, stackTrace);
      rethrow;
    }
  }

  Stream<List<Map<String, dynamic>>> getTransactionHistoryStream() {
    _talker.info('Starting transaction history stream at ${DateTime.now()}');
    return select(transactionsTable)
        .watch()
        .asyncMap((transactions) async {
          _talker.info('Processing ${transactions.length} raw transactions');
          final filteredTransactions =
              transactions.where((t) => t.accountId == 1).toList();
          _talker.info(
            'Filtered transactions for account 1: ${filteredTransactions.length}',
          );

          if (filteredTransactions.isEmpty) {
            _talker.warning('No transactions found for account 1');
            return [
              {'type': 'daily', 'data': []},
              {'type': 'monthly', 'data': []},
            ];
          }

          final now = DateTime.now();
          final dateFormat = DateFormat('yyyy-MM-dd');
          final monthFormat = DateFormat('yyyy-MM');

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          final categories = await select(categoriesTable).get();
          final categoriesMap = {for (var c in categories) c.id: c};

          // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π) —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
          final dailyIncomeTotal = <String, double>{};
          final dailyExpenseTotal = <String, double>{};

          for (var tx in filteredTransactions) {
            final dateKey = dateFormat.format(tx.transactionDate);
            final category = categoriesMap[tx.categoryId];

            if (category != null) {
              if (category.isIncome) {
                dailyIncomeTotal[dateKey] =
                    (dailyIncomeTotal[dateKey] ?? 0) + tx.amount;
              } else {
                dailyExpenseTotal[dateKey] =
                    (dailyExpenseTotal[dateKey] ?? 0) + tx.amount;
              }
            }
            _talker.debug(
              'Daily aggregation: $dateKey -> Income: ${dailyIncomeTotal[dateKey] ?? 0}, Expense: ${dailyExpenseTotal[dateKey] ?? 0}',
            );
          }

          final dailyData = <Map<String, dynamic>>[];
          for (int i = 0; i < 30; i++) {
            final date = now.subtract(Duration(days: i));
            final dateKey = dateFormat.format(date);
            final incomeAmount = dailyIncomeTotal[dateKey] ?? 0.0;
            final expenseAmount = dailyExpenseTotal[dateKey] ?? 0.0;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            if (incomeAmount > 0) {
              dailyData.insert(0, {
                'date': date,
                'amount': incomeAmount,
                'isIncome': true,
              });
            }

            if (expenseAmount > 0) {
              dailyData.insert(0, {
                'date': date,
                'amount': expenseAmount,
                'isIncome': false,
              });
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—É—é –∑–∞–ø–∏—Å—å
            if (incomeAmount == 0 && expenseAmount == 0) {
              dailyData.insert(0, {
                'date': date,
                'amount': 0.0,
                'isIncome': true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
              });
            }
          }

          // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤) —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
          final monthlyIncomeTotal = <String, double>{};
          final monthlyExpenseTotal = <String, double>{};

          for (var tx in filteredTransactions) {
            final monthKey = monthFormat.format(tx.transactionDate);
            final category = categoriesMap[tx.categoryId];

            if (category != null) {
              if (category.isIncome) {
                monthlyIncomeTotal[monthKey] =
                    (monthlyIncomeTotal[monthKey] ?? 0) + tx.amount;
              } else {
                monthlyExpenseTotal[monthKey] =
                    (monthlyExpenseTotal[monthKey] ?? 0) + tx.amount;
              }
            }
            _talker.debug(
              'Monthly aggregation: $monthKey -> Income: ${monthlyIncomeTotal[monthKey] ?? 0}, Expense: ${monthlyExpenseTotal[monthKey] ?? 0}',
            );
          }

          final monthlyData = <Map<String, dynamic>>[];
          for (int i = 0; i < 12; i++) {
            final date = DateTime(now.year, now.month - i);
            final monthKey = monthFormat.format(date);
            final lastDay = DateTime(date.year, date.month + 1, 0);
            final incomeAmount = monthlyIncomeTotal[monthKey] ?? 0.0;
            final expenseAmount = monthlyExpenseTotal[monthKey] ?? 0.0;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            if (incomeAmount > 0) {
              monthlyData.insert(0, {
                'date': lastDay,
                'amount': incomeAmount,
                'isIncome': true,
              });
            }

            if (expenseAmount > 0) {
              monthlyData.insert(0, {
                'date': lastDay,
                'amount': expenseAmount,
                'isIncome': false,
              });
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—É—é –∑–∞–ø–∏—Å—å
            if (incomeAmount == 0 && expenseAmount == 0) {
              monthlyData.insert(0, {
                'date': lastDay,
                'amount': 0.0,
                'isIncome': true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
              });
            }
          }

          final result = [
            {'type': 'daily', 'data': dailyData},
            {'type': 'monthly', 'data': monthlyData},
          ];
          _talker.info('Generated history data: $result');
          return result;
        })
        .handleError((error, stackTrace) {
          _talker.error(
            'Error in transaction history stream: $error',
            stackTrace,
          );
          return [
            {'type': 'daily', 'data': []},
            {'type': 'monthly', 'data': []},
          ];
        });
  }

  Future<List<TransactionsTableData>> getAllTransactions() async {
    _talker.info('üìä Fetching all transactions');
    try {
      final transactions = await select(transactionsTable).get();
      _talker.info('‚úÖ Retrieved ${transactions.length} transactions');
      return transactions;
    } catch (e, stackTrace) {
      _talker.error('‚ùå Failed to fetch transactions', e, stackTrace);
      rethrow;
    }
  }

  Future<void> _insertInitialCategories() async {
    _talker.debug('üìù Inserting initial categories...');
    await batch((batch) {
      batch.insertAll(categoriesTable, [
        CategoriesTableCompanion.insert(
          id: const Value(1),
          name: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
          emodji: 'üí∞',
          isIncome: true,
        ),
        CategoriesTableCompanion.insert(
          id: const Value(2),
          name: '–§—Ä–∏–ª–∞–Ω—Å',
          emodji: 'üí∞',
          isIncome: true,
        ),
        CategoriesTableCompanion.insert(
          id: const Value(3),
          name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
          emodji: 'üõí',
          isIncome: false,
        ),
        CategoriesTableCompanion.insert(
          id: const Value(4),
          name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
          emodji: 'üöó',
          isIncome: false,
        ),
        CategoriesTableCompanion.insert(
          id: const Value(5),
          name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
          emodji: 'üé¨',
          isIncome: false,
        ),
      ]);
    });
  }

  Future<void> _insertInitialAccount() async {
    _talker.debug('üí≥ Inserting initial account...');
    final now = DateTime.now();
    await into(accountsTable).insert(
      AccountsTableCompanion.insert(
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç',
        balance: 100.0,
        currency: const Value('RUB'),
        createdAt: now,
        updatedAt: now,
      ),
    );
  }

  Future<void> _insertSampleTransactions() async {
    _talker.debug('üí∞ Inserting sample transactions...');
    final now = DateTime.now();
    final random = Random();

    final transactions = <TransactionsTableCompanion>[];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    for (int monthOffset = 0; monthOffset < 6; monthOffset++) {
      final monthDate = DateTime(now.year, now.month - monthOffset);
      final daysInMonth = DateTime(monthDate.year, monthDate.month + 1, 0).day;

      // 1. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã (–∑–∞—Ä–ø–ª–∞—Ç–∞ + —Ñ—Ä–∏–ª–∞–Ω—Å)

      // –ó–∞—Ä–ø–ª–∞—Ç–∞ (–≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞)
      transactions.add(
        TransactionsTableCompanion.insert(
          accountId: 1,
          categoryId: 1,
          amount: 75000 + random.nextDouble() * 10000, // 75-85 —Ç—ã—Å.
          comment: Value('–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ ${DateFormat('MMMM')}'),
          transactionDate: monthDate.add(const Duration(days: 5)),
          createdAt: monthDate.add(const Duration(days: 5)),
          updatedAt: monthDate.add(const Duration(days: 5)),
        ),
      );

      // –§—Ä–∏–ª–∞–Ω—Å (1-3 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)
      final freelanceCount = 1 + random.nextInt(2);
      for (int i = 0; i < freelanceCount; i++) {
        transactions.add(
          TransactionsTableCompanion.insert(
            accountId: 1,
            categoryId: 2,
            amount: 10000 + random.nextDouble() * 20000, // 10-30 —Ç—ã—Å.
            comment: Value('–ü—Ä–æ–µ–∫—Ç ${i + 1} (${DateFormat('MMMM')})'),
            transactionDate: monthDate.add(
              Duration(days: 10 + random.nextInt(15)),
            ),
            createdAt: monthDate.add(Duration(days: 10 + random.nextInt(15))),
            updatedAt: monthDate.add(Duration(days: 10 + random.nextInt(15))),
          ),
        );
      }

      // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–ø—Ä–æ–¥—É–∫—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)

      // –ü—Ä–æ–¥—É–∫—Ç—ã (2-4 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)
      final groceriesCount = 2 + random.nextInt(3);
      for (int i = 0; i < groceriesCount; i++) {
        transactions.add(
          TransactionsTableCompanion.insert(
            accountId: 1,
            categoryId: 3,
            amount: (2000 + random.nextInt(3000)).toDouble(),
            comment: Value(_getGroceriesComment(random)),
            transactionDate: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            createdAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            updatedAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
          ),
        );
      }

      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (3-6 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
      final transportCount = 3 + random.nextInt(4);
      for (int i = 0; i < transportCount; i++) {
        transactions.add(
          TransactionsTableCompanion.insert(
            accountId: 1,
            categoryId: 4,
            amount: (500 + random.nextInt(1500)).toDouble(), 
            comment: Value(_getTransportComment(random)),
            transactionDate: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            createdAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            updatedAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
          ),
        );
      }

      // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (1-2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)
      final entertainmentCount = 1 + random.nextInt(2);
      for (int i = 0; i < entertainmentCount; i++) {
        transactions.add(
          TransactionsTableCompanion.insert(
            accountId: 1,
            categoryId: 5,
            amount: (1000 + random.nextInt(4000)).toDouble(), 
            comment: Value(_getEntertainmentComment(random)),
            transactionDate: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            createdAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
            updatedAt: monthDate.add(
              Duration(days: random.nextInt(daysInMonth)),
            ),
          ),
        );
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    final specialTransactions = [
      
      TransactionsTableCompanion.insert(
        accountId: 1,
        categoryId: 3,
        amount: -12500.0,
        comment: Value('–û–ø–ª–∞—Ç–∞ –≥–æ–¥–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å–∞ –∫–æ—Ñ–µ'),
        transactionDate: DateTime(now.year, now.month - 2, 15),
        createdAt: DateTime(now.year, now.month - 2, 15),
        updatedAt: DateTime(now.year, now.month - 2, 15),
      ),
     
      TransactionsTableCompanion.insert(
        accountId: 1,
        categoryId: 2,
        amount: 4500.0,
        comment: Value('–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑'),
        transactionDate: DateTime(now.year, now.month - 1, 20),
        createdAt: DateTime(now.year, now.month - 1, 20),
        updatedAt: DateTime(now.year, now.month - 1, 20),
      ),
    ];

    transactions.addAll(specialTransactions);

    await batch((batch) {
      batch.insertAll(transactionsTable, transactions);
    });
    _talker.info('‚úÖ Inserted ${transactions.length} sample transactions');
  }
}

String _getGroceriesComment(Random random) {
  const comments = [
    '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é',
    '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
    '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã',
    '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    '–ú—è—Å–æ –∏ —Ä—ã–±–∞',
    '–ë–∞–∫–∞–ª–µ—è',
    '–î–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
  ];
  return comments[random.nextInt(comments.length)];
}

String _getTransportComment(Random random) {
  const comments = [
    '–¢–∞–∫—Å–∏ –¥–æ —Ä–∞–±–æ—Ç—ã',
    '–ú–µ—Ç—Ä–æ',
    '–ê–≤—Ç–æ–±—É—Å',
    '–ó–∞–ø—Ä–∞–≤–∫–∞',
    '–ü–∞—Ä–∫–æ–≤–∫–∞',
    '–ö–∞—Ä—à–µ—Ä–∏–Ω–≥',
  ];
  return comments[random.nextInt(comments.length)];
}

String _getEntertainmentComment(Random random) {
  const comments = [
    '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ',
    '–ö–æ–Ω—Ü–µ—Ä—Ç',
    '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    '–ë–∏–ª–µ—Ç—ã –≤ —Ç–µ–∞—Ç—Ä',
    '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥',
    '–ö–≤–µ—Å—Ç-–∫–æ–º–Ω–∞—Ç–∞',
  ];
  return comments[random.nextInt(comments.length)];
}

LazyDatabase _openConnection(Talker talker) {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'app_database.db'));

    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }
    final cachebase = (await getTemporaryDirectory()).path;
    sqlite3.tempDirectory = cachebase;

    talker.info('üìÇ Database path: ${file.path}');

    final executor = NativeDatabase.createInBackground(file);
    return _LoggedDatabaseExecutor(executor, talker);
  });
}

class _LoggedDatabaseExecutor extends QueryExecutor {
  final QueryExecutor _executor;
  final Talker _talker;

  _LoggedDatabaseExecutor(this._executor, this._talker);

  @override
  SqlDialect get dialect => _executor.dialect;

  @override
  Future<bool> ensureOpen(QueryExecutorUser user) async {
    _talker.debug('üîì Ensuring database connection is open');
    final result = await _executor.ensureOpen(user);
    _talker.info('‚úÖ Database connection established');
    return result;
  }

  @override
  Future<void> runBatched(BatchedStatements statements) async {
    _talker.info(
      'üì¶ Executing batch with ${statements.statements.length} statements',
    );
    final stopwatch = Stopwatch()..start();
    try {
      await _executor.runBatched(statements);
      stopwatch.stop();
      _talker.info(
        '‚úÖ Batch executed successfully in ${stopwatch.elapsedMilliseconds}ms',
      );
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå Batch execution failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  Future<int> runDelete(String statement, List<Object?> args) async {
    _talker.debug('üóëÔ∏è DELETE: $statement');
    _talker.verbose('üìä Args: $args');
    final stopwatch = Stopwatch()..start();
    try {
      final result = await _executor.runDelete(statement, args);
      stopwatch.stop();
      _talker.info(
        '‚úÖ DELETE completed in ${stopwatch.elapsedMilliseconds}ms, affected rows: $result',
      );
      return result;
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå DELETE failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  Future<int> runInsert(String statement, List<Object?> args) async {
    _talker.debug('‚ûï INSERT: $statement');
    _talker.verbose('üìä Args: $args');
    final stopwatch = Stopwatch()..start();
    try {
      final result = await _executor.runInsert(statement, args);
      stopwatch.stop();
      _talker.info(
        '‚úÖ INSERT completed in ${stopwatch.elapsedMilliseconds}ms, ID: $result',
      );
      return result;
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå INSERT failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  Future<List<Map<String, Object?>>> runSelect(
    String statement,
    List<Object?> args,
  ) async {
    _talker.debug('üîç SELECT: $statement');
    _talker.verbose('üìä Args: $args');
    final stopwatch = Stopwatch()..start();
    try {
      final result = await _executor.runSelect(statement, args);
      stopwatch.stop();
      _talker.info(
        '‚úÖ SELECT completed in ${stopwatch.elapsedMilliseconds}ms, returned ${result.length} rows',
      );
      return result;
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå SELECT failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  Future<int> runUpdate(String statement, List<Object?> args) async {
    _talker.debug('‚úèÔ∏è UPDATE: $statement');
    _talker.verbose('üìä Args: $args');
    final stopwatch = Stopwatch()..start();
    try {
      final result = await _executor.runUpdate(statement, args);
      stopwatch.stop();
      _talker.info(
        '‚úÖ UPDATE completed in ${stopwatch.elapsedMilliseconds}ms, affected rows: $result',
      );
      return result;
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå UPDATE failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  Future<void> runCustom(String statement, [List<Object?>? args]) async {
    _talker.debug('‚öôÔ∏è CUSTOM: $statement');
    _talker.verbose('üìä Args: $args');
    final stopwatch = Stopwatch()..start();
    try {
      await _executor.runCustom(statement, args);
      stopwatch.stop();
      _talker.info('‚úÖ CUSTOM completed in ${stopwatch.elapsedMilliseconds}ms');
    } catch (e, stackTrace) {
      stopwatch.stop();
      _talker.error(
        '‚ùå CUSTOM failed after ${stopwatch.elapsedMilliseconds}ms',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  @override
  TransactionExecutor beginTransaction() {
    _talker.info('üîÑ BEGIN TRANSACTION');
    return _LoggedTransactionExecutor(_executor.beginTransaction(), _talker);
  }

  @override
  Future<void> close() async {
    _talker.info('üö™ Closing database connection');
    await _executor.close();
    _talker.info('‚úÖ Database connection closed');
  }

  @override
  QueryExecutor beginExclusive() {
    _talker.debug('üîí Starting exclusive transaction');
    return _executor.beginExclusive();
  }
}

class _LoggedTransactionExecutor extends TransactionExecutor {
  final TransactionExecutor _executor;
  final Talker _talker;

  _LoggedTransactionExecutor(this._executor, this._talker);

  @override
  SqlDialect get dialect => _executor.dialect;

  @override
  Future<bool> ensureOpen(QueryExecutorUser user) async {
    _talker.debug('üîì [TX] Ensuring transaction connection is open');
    return await _executor.ensureOpen(user);
  }

  @override
  TransactionExecutor beginTransaction() {
    _talker.info('üîÑ Starting nested transaction');
    return _LoggedTransactionExecutor(_executor.beginTransaction(), _talker);
  }

  @override
  Future<void> send() async {
    _talker.info('‚úÖ COMMIT TRANSACTION');
    await _executor.send();
  }

  @override
  Future<void> rollback() async {
    _talker.warning('üîÑ ROLLBACK TRANSACTION');
    await _executor.rollback();
  }

  @override
  Future<List<Map<String, Object?>>> runSelect(
    String statement,
    List<Object?> args,
  ) async {
    _talker.debug('üîç [TX] SELECT: $statement');
    return _executor.runSelect(statement, args);
  }

  @override
  Future<int> runInsert(String statement, List<Object?> args) async {
    _talker.debug('‚ûï [TX] INSERT: $statement');
    return _executor.runInsert(statement, args);
  }

  @override
  Future<int> runUpdate(String statement, List<Object?> args) async {
    _talker.debug('‚úèÔ∏è [TX] UPDATE: $statement');
    return _executor.runUpdate(statement, args);
  }

  @override
  Future<int> runDelete(String statement, List<Object?> args) async {
    _talker.debug('üóëÔ∏è [TX] DELETE: $statement');
    return _executor.runDelete(statement, args);
  }

  @override
  Future<void> runCustom(String statement, [List<Object?>? args]) async {
    _talker.debug('‚öôÔ∏è [TX] CUSTOM: $statement');
    await _executor.runCustom(statement, args);
  }

  @override
  Future<void> runBatched(BatchedStatements statements) async {
    _talker.info(
      'üì¶ [TX] Running batched statements: ${statements.statements.length} queries',
    );
    await _executor.runBatched(statements);
  }

  @override
  QueryExecutor beginExclusive() {
    _talker.debug('üîí [TX] Starting exclusive transaction');
    return _executor.beginExclusive();
  }

  @override
  bool get supportsNestedTransactions => true;
}
