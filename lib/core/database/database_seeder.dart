import 'package:drift/drift.dart';
import 'package:injectable/injectable.dart';
import 'package:shrm_homework_app/core/database/app_database.dart';

@injectable
class DatabaseSeeder {
  final AppDatabase _database;

  DatabaseSeeder(this._database);

  /// –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> seedDatabase() async {
    await _clearAllData();
    await _seedCategories();
    await _seedAccount();
    await _seedTransactions();
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
  Future<void> addMoreTestData() async {
    await _addRandomTransactions(20); // –î–æ–±–∞–≤–ª—è–µ–º 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  }

  Future<void> _clearAllData() async {
    await _database.delete(_database.transactionsTable).go();
    await _database.delete(_database.accountsTable).go();
    await _database.delete(_database.categoriesTable).go();
    await _database.delete(_database.backUpOperationsTable).go();
  }

  Future<void> _seedCategories() async {
    final categories = [
      // –î–æ—Ö–æ–¥—ã
      {'id': 1, 'name': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'emoji': 'üí∞', 'isIncome': true},
      {'id': 2, 'name': '–§—Ä–∏–ª–∞–Ω—Å', 'emoji': 'üíº', 'isIncome': true},
      {'id': 3, 'name': '–ë–æ–Ω—É—Å', 'emoji': 'üéÅ', 'isIncome': true},
      {'id': 4, 'name': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'emoji': 'üìà', 'isIncome': true},
      {'id': 5, 'name': '–ü–æ–¥–∞—Ä–∫–∏', 'emoji': 'üéâ', 'isIncome': true},
      
      // –†–∞—Å—Ö–æ–¥—ã
      {'id': 6, 'name': '–ü—Ä–æ–¥—É–∫—Ç—ã', 'emoji': 'üõí', 'isIncome': false},
      {'id': 7, 'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'emoji': 'üöó', 'isIncome': false},
      {'id': 8, 'name': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'emoji': 'üé¨', 'isIncome': false},
      {'id': 9, 'name': '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'emoji': '‚òï', 'isIncome': false},
      {'id': 10, 'name': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', 'emoji': 'üí°', 'isIncome': false},
      {'id': 11, 'name': '–ü–æ–∫—É–ø–∫–∏', 'emoji': 'üõçÔ∏è', 'isIncome': false},
      {'id': 12, 'name': '–ó–¥–æ—Ä–æ–≤—å–µ', 'emoji': 'üíä', 'isIncome': false},
      {'id': 13, 'name': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'emoji': 'üìö', 'isIncome': false},
      {'id': 14, 'name': '–°–ø–æ—Ä—Ç', 'emoji': '‚öΩ', 'isIncome': false},
    ];

    await _database.batch((batch) {
      for (final category in categories) {
        batch.insert(
          _database.categoriesTable,
          CategoriesTableCompanion.insert(
            id: Value(category['id'] as int),
            name: category['name'] as String,
            emodji: category['emoji'] as String,
            isIncome: category['isIncome'] as bool,
          ),
        );
      }
    });
  }

  Future<void> _seedAccount() async {
    final now = DateTime.now();
    await _database.into(_database.accountsTable).insert(
      AccountsTableCompanion.insert(
        id: const Value(1),
        name: '–ú–æ–π —Å—á–µ—Ç',
        balance: 150000.0,
        currency: const Value('RUB'),
        createdAt: now,
        updatedAt: now,
      ),
    );
  }

  Future<void> _seedTransactions() async {
    await _addRandomTransactions(50);
  }

  Future<void> _addRandomTransactions(int count) async {
    final now = DateTime.now();
    final transactions = <TransactionsTableCompanion>[];

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    final incomeCategories = [1, 2, 3, 4, 5];
    final expenseCategories = [6, 7, 8, 9, 10, 11, 12, 13, 14];
    
    final incomeComments = [
      '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü',
      '–ü—Ä–µ–º–∏—è',
      '–§—Ä–∏–ª–∞–Ω—Å –ø—Ä–æ–µ–∫—Ç',
      '–î–∏–≤–∏–¥–µ–Ω–¥—ã',
      '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤',
      '–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞',
      '–ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π',
    ];
    
    final expenseComments = [
      '–ü–æ–∫—É–ø–∫–∏ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–µ',
      '–û–±–µ–¥ –≤ –∫–∞—Ñ–µ',
      '–ü—Ä–æ–µ–∑–¥–Ω–æ–π –±–∏–ª–µ—Ç',
      '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
      '–ü–æ–∫—É–ø–∫–∞ –æ–¥–µ–∂–¥—ã',
      '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞',
      '–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª',
      '–ö–Ω–∏–≥–∏',
      '–ö–∏–Ω–æ',
      '–¢–∞–∫—Å–∏',
      '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å',
      '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
    ];

    for (int i = 0; i < count; i++) {
      final daysAgo = _random.nextInt(60); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π
      final transactionDate = now.subtract(Duration(days: daysAgo));
      
      final isIncome = _random.nextBool() && _random.nextDouble() < 0.3; // 30% –¥–æ—Ö–æ–¥—ã
      
      double amount;
      int categoryId;
      String comment;
      
      if (isIncome) {
        categoryId = incomeCategories[_random.nextInt(incomeCategories.length)];
        amount = (_random.nextDouble() * 80000 + 5000); // 5k - 85k
        comment = incomeComments[_random.nextInt(incomeComments.length)];
      } else {
        categoryId = expenseCategories[_random.nextInt(expenseCategories.length)];
        amount = -(_random.nextDouble() * 15000 + 100); // -100 - -15k
        comment = expenseComments[_random.nextInt(expenseComments.length)];
      }
      
      transactions.add(
        TransactionsTableCompanion.insert(
          accountId: 1,
          categoryId: categoryId,
          amount: amount,
          comment: comment,
          transactionDate: transactionDate,
          createdAt: transactionDate,
          updatedAt: transactionDate,
        ),
      );
    }

    await _database.batch((batch) {
      batch.insertAll(_database.transactionsTable, transactions);
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
  static final _random = DateTime.now().millisecondsSinceEpoch.hashCode;
}

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
extension _RandomInt on int {
  int nextInt(int max) => (this * 1103515245 + 12345) % max;
  double nextDouble() => (nextInt(1000000) / 1000000.0);
  bool nextBool() => nextInt(2) == 1;
}