import 'dart:async';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:injectable/injectable.dart';
import 'package:talker_flutter/talker_flutter.dart';

@singleton
class ConnectivityService {
  final Connectivity _connectivity = Connectivity();
  final Talker _talker;

  ConnectivityService(this._talker);

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<bool> get isConnected async {
    try {
      final results = await _connectivity.checkConnectivity();
      final connected = _isConnectedResults(results);
      
      _talker.debug('üåê Connection status: ${connected ? 'ONLINE' : 'OFFLINE'}');
      _talker.debug('üîç Connection types: $results');
      return connected;
    } catch (e) {
      _talker.error('‚ùå Error checking connectivity', e);
      return false;
    }
  }

  /// –°—Ç—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Stream<bool> get connectivityStream {
    return _connectivity.onConnectivityChanged.map((results) {
      final connected = _isConnectedResults(results);
      _talker.info('üîÑ Connection changed: ${connected ? 'ONLINE' : 'OFFLINE'}');
      _talker.debug('üîç New connection types: $results');
      return connected;
    }).handleError((error) {
      _talker.error('‚ùå Error in connectivity stream', error);
      return false;
    });
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∑–Ω–∞—á–∞—é—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  bool _isConnectedResults(List<ConnectivityResult> results) {
    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    return results.any((result) => _isConnectedResult(result));
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∑–Ω–∞—á–∞–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  bool _isConnectedResult(ConnectivityResult result) {
    switch (result) {
      case ConnectivityResult.wifi:
      case ConnectivityResult.mobile:
      case ConnectivityResult.ethernet:
        return true;
      case ConnectivityResult.none:
      case ConnectivityResult.bluetooth:
      case ConnectivityResult.vpn:
      case ConnectivityResult.other:
        return false;
    }
  }

  /// –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<void> waitForConnection({Duration timeout = const Duration(seconds: 30)}) async {
    if (await isConnected) {
      _talker.debug('‚úÖ Already connected, no need to wait');
      return;
    }

    _talker.info('‚è≥ Waiting for internet connection...');
    
    try {
      await connectivityStream
          .where((connected) => connected)
          .timeout(timeout)
          .first;
      
      _talker.info('‚úÖ Internet connection restored');
    } on TimeoutException {
      _talker.warning('‚è∞ Timeout waiting for connection after ${timeout.inSeconds}s');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<List<ConnectivityResult>> getCurrentConnectivityTypes() async {
    try {
      final results = await _connectivity.checkConnectivity();
      _talker.debug('üì± Current connectivity types: $results');
      return results;
    } catch (e) {
      _talker.error('‚ùå Error getting connectivity types', e);
      return [ConnectivityResult.none];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Future<bool> isConnectedVia(ConnectivityResult type) async {
    try {
      final results = await _connectivity.checkConnectivity();
      final hasType = results.contains(type);
      _talker.debug('üîç Connection via $type: $hasType');
      return hasType;
    } catch (e) {
      _talker.error('‚ùå Error checking specific connectivity type', e);
      return false;
    }
  }
}