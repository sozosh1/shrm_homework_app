import 'package:dio/dio.dart';
import 'package:talker_flutter/talker_flutter.dart';
import 'isolate_deserializer.dart';

/// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç—ã
class IsolateDeserializerInterceptor extends Interceptor {
  final Talker _talker;

  IsolateDeserializerInterceptor(this._talker);

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –¥–∞–Ω–Ω—ã–µ
      if (response.data is String && _isJsonString(response.data)) {
        _talker.debug(
          'üîÑ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç: ${response.requestOptions.path}',
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final originalData = response.data;

        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç
        final deserializedData = await IsolateDeserializer.deserializeSafe(
          originalData,
          (json) => json, // –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ Map
        );

        if (deserializedData != null) {
          response.data = deserializedData;
          _talker.debug('‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
          _talker.warning(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é',
          );
        }
      }
    } catch (e, st) {
      _talker.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç', e, st);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }

    handler.next(response);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ JSON
  bool _isJsonString(String str) {
    try {
      final trimmed = str.trim();
      return (trimmed.startsWith('{') && trimmed.endsWith('}')) ||
          (trimmed.startsWith('[') && trimmed.endsWith(']'));
    } catch (e) {
      return false;
    }
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
class TypedIsolateDeserializerInterceptor extends Interceptor {
  final Talker _talker;
  final Map<String, dynamic Function(Map<String, dynamic>)> _typeFactories;

  TypedIsolateDeserializerInterceptor(this._talker, this._typeFactories);

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) async {
    try {
      final path = response.requestOptions.path;
      final factory = _typeFactories[path];

      if (factory != null &&
          response.data is String &&
          _isJsonString(response.data)) {
        _talker.debug('üîÑ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç: $path');

        final originalData = response.data;

        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–±—Ä–∏–∫–∏
        final deserializedData = await IsolateDeserializer.deserializeSafe(
          originalData,
          factory,
        );

        if (deserializedData != null) {
          response.data = deserializedData;
          _talker.debug('‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
          _talker.warning(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é',
          );
        }
      }
    } catch (e, st) {
      _talker.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç',
        e,
        st,
      );
    }

    handler.next(response);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ JSON
  bool _isJsonString(String str) {
    try {
      final trimmed = str.trim();
      return (trimmed.startsWith('{') && trimmed.endsWith('}')) ||
          (trimmed.startsWith('[') && trimmed.endsWith(']'));
    } catch (e) {
      return false;
    }
  }
}
